# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true

# 0. STEPS TO SET UP TEST AND PUBLICATIOON TO SONARCLOUD....
# 1. Download Sonarcloud from Visual Studio Marketplace
# 2. configure endpoints for the Prepare Analysis Config for SonraCloud Service
# 3. go to service Connections -> SonarCloud.
# 4. add a new Service connection after getting the token from SonarCloud.
# 5. Give the connection an identifiable name
# 6. Save and return to edit the pipeline to add Prepare Analysis Configuration.
# 7. Select the correct endpoint and Organization from Sonarcloud task panel. -->
# 8. Get the project key. (it's in the url AFTER the '?=' )
# 9. Choose 'Integrate wth MSBuild' and the enter the Project Key below
# 10. Enter the project name. it's what it's called in SonarCloud
# 11. Use a script to build the project for testing

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'MvcStarterServiceConnection'
    organization: 'markmoorerev'
    scannerMode: 'MSBuild'
    projectKey: 'markmoorerev_MvcStarter'
    projectName: 'MvcStarter'
  displayName: sonarcloud analysis prepare

# 11. Use a script to build the project for testing
- script: dotnet build 'MvcProjectStarter/MvcProjectStarter.sln'
  displayName: dotnet build

#run the tests you have. this automatically creates an artifact to analyze.
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'MvcProjectStarter/MvcProjectStarter.sln'
    testRunTitle: 'running tests'

#run the sonarcloud analysis on the test artifact
- task: SonarCloudAnalyze@1
  displayName: sonarcloud analysis run

#based on if the preious step succeeded, 
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: $(Common.TestResultsDirectory)/*.trx
  displayName: test results build publish

# publish results to a coburtura.xml. this is used in SonarCloud
- task: PublishCodeCoverageResults@1
  condition: succeededOrFailed()
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
  displayName: code coverage build publish

# use the .xml from the previous step to publish to SonarCloud
- task: SonarCloudPublish@1
  condition: succeededOrFailed()
  displayName: sonarcloud results build publish

# run th esame tests for Azure analisis
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'MvcProjectStarter/MvcProjectStarter.sln'
    testRunTitle: 'running tests'

# publish the website to the Azure App Service.
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1(5d150957-9944-40b9-b9e9-2a32c983a1f8)'
    appType: 'webApp'
    WebAppName: 'mark-mvc-test'
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
